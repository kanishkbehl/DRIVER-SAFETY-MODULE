# Detects:
# - Helmet usage and phone usage using YOLOv8 custom model
# - Displays bounding boxes and labels on video feed using PiCamera2
# - Controls hardware indicators (LEDs and Buzzer) via GPIO:
#     • Green LED ON if helmet detected
#     • Red LED ON if no helmet detected
#     • Blue LED ON if phone detected
#     • Buzzer ON for any violation (no helmet or phone usage)
# Designed to run on Raspberry Pi using PiCamera2 and GPIO Zero

# -*- coding: utf-8 -*-
"""Helmet_phone_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ODO7kgqQ6HzmVchjp7p-cmOdMWF5VMs2
"""

import cv2
import time
from gpiozero import LED, Buzzer
from ultralytics import YOLO
from picamera2 import Picamera2

# Initialize GPIO
buzzer = Buzzer(18)
led_helmet = LED(23)  # Green: Helmet detected
led_no_helmet = LED(25)  # Red: No helmet
led_phone = LED(24)  # Blue: Phone detected

# Load model
model = YOLO("/home/pi/Desktop/Models and codes/newhelemt_phone.pt")

# Camera setup
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"size": (320, 240)})
picam2.configure(config)
picam2.start()
time.sleep(2)

# Color definitions
COLORS = {
    'helmet': (0, 255, 0),  # Green
    'phone': (255, 0, 0),  # Blue
    'no_helmet': (0, 0, 255)  # Red
}

while True:
    # Capture frame
    frame = picam2.capture_array()
    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

    # Reset detection flags
    helmet_detected = False
    phone_detected = False

    # Run detection
    results = model(frame, verbose=False)

    # Process results
    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = box.conf[0].item()
            class_id = int(box.cls[0])
            class_name = model.names[class_id].lower()

            if conf > 0.5:  # Only confident detections
                if 'helmet' in class_name:
                    helmet_detected = True
                    color = COLORS['helmet']
                    label = "Helmet"
                elif 'phone' in class_name:
                    phone_detected = True
                    color = COLORS['phone']
                    label = "Phone"

                # Draw bounding box and label
                cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                cv2.putText(frame, f"{label} {conf:.2f}", (x1, y1-10),
                          cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)

    # Display status
    y_offset = 30
    status_text = "Helmet: " + ("YES" if helmet_detected else "NO")
    status_color = COLORS['helmet'] if helmet_detected else COLORS['no_helmet']
    cv2.putText(frame, status_text, (10, y_offset),
               cv2.FONT_HERSHEY_SIMPLEX, 0.7, status_color, 2)

    if phone_detected:
        y_offset += 30
        cv2.putText(frame, "PHONE DETECTED!", (10, y_offset),
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, COLORS['phone'], 2)

    # Control LEDs and buzzer
    led_helmet.on() if helmet_detected else led_helmet.off()
    led_no_helmet.on() if not helmet_detected else led_no_helmet.off()
    led_phone.on() if phone_detected else led_phone.off()

    # Activate buzzer for violations
    buzzer.on() if (phone_detected or not helmet_detected) else buzzer.off()

    # Show frame
    cv2.imshow("Helmet & Phone Detection", frame)

    # Exit on 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
buzzer.off()
led_helmet.off()
led_no_helmet.off()
led_phone.off()
cv2.destroyAllWindows()
picam2.stop()